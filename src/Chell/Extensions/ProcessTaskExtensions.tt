<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
/// <auto-generated />
using System.Threading.Tasks;

namespace Chell
{
    public static partial class ProcessTaskExtensions
    {
<# for (var i = 2; i <= 10; i++) {
       var inTuple = string.Join(", ", Enumerable.Range(1, i).Select(x => $"ProcessTask T{x}"));
       var outTuple = string.Join(", ", Enumerable.Range(1, i).Select(x => $"ProcessOutput Result{x}"));
#>
        public static System.Runtime.CompilerServices.TaskAwaiter<(<#= outTuple #>)> GetAwaiter(this (<#= inTuple #>) tasks)
        {
            static async Task<(<#= outTuple #>)> WhenAllAsync(<#= string.Join(", ", Enumerable.Range(1, i).Select(x => $"ProcessTask t{x}")) #>)
            {
                var results = await Task.WhenAll<ProcessOutput>(<#= string.Join(", ", Enumerable.Range(1, i).Select(x => $"t{x}")) #>).ConfigureAwait(false);
                return (<#= string.Join(", ", Enumerable.Range(0, i).Select(x => $"results[{x}]")) #>);
            }
            return WhenAllAsync(<#= string.Join(", ", Enumerable.Range(1, i).Select(x => $"tasks.T{x}")) #>).GetAwaiter();
        }
<# } #>

    }
}