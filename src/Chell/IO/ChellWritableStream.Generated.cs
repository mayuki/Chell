#nullable enable
/// <auto-generated />
using System;
using System.IO;
using System.Threading.Tasks;

namespace Chell.IO
{
    public partial class ChellWritableStream
    {
        public void Write(string? value) => _writer.Write(value);
        public void WriteLine(string? value) => _writer.WriteLine(value);
        public Task WriteAsync(string? value) => _writer.WriteAsync(value);
        public Task WriteLineAsync(string? value) => _writer.WriteLineAsync(value);
        public void Write(char value) => _writer.Write(value);
        public void WriteLine(char value) => _writer.WriteLine(value);
        public Task WriteAsync(char value) => _writer.WriteAsync(value);
        public Task WriteLineAsync(char value) => _writer.WriteLineAsync(value);
        public void Write(char[]? value) => _writer.Write(value);
        public void WriteLine(char[]? value) => _writer.WriteLine(value);
        public Task WriteAsync(char[]? value) => _writer.WriteAsync(value);
        public Task WriteLineAsync(char[]? value) => _writer.WriteLineAsync(value);
        public void Write(object? value) => _writer.Write(value);
        public void WriteLine(object? value) => _writer.WriteLine(value);
        public void Write(double value) => _writer.Write(value);
        public void WriteLine(double value) => _writer.WriteLine(value);
        public void Write(float value) => _writer.Write(value);
        public void WriteLine(float value) => _writer.WriteLine(value);
        public void Write(long value) => _writer.Write(value);
        public void WriteLine(long value) => _writer.WriteLine(value);
        public void Write(int value) => _writer.Write(value);
        public void WriteLine(int value) => _writer.WriteLine(value);
        public void Write(ReadOnlySpan<char> value) => _writer.Write(value);
        public void WriteLine(ReadOnlySpan<char> value) => _writer.WriteLine(value);
        public Task WriteAsync(ReadOnlyMemory<char> value) => _writer.WriteAsync(value);
        public Task WriteLineAsync(ReadOnlyMemory<char> value) => _writer.WriteLineAsync(value);
    }
}